* Implémentation de la solution pour un service manipulant des interfaces (Hao)

1. J'ai modifié les Personne et Etudiant aux Interfaces, et ajouté PersonneImpl et EtudiantImpl. Après j'ai ajouté PersonneAdapter et EtudiantAdapter pour l'échange entre Interface et Classe.

2. J'ai ajouté @XmlJavaTypeAdapters({
    @XmlJavaTypeAdapter(PersonneAdapter.class),
    @XmlJavaTypeAdapter(EtudiantAdapter.class)
})
dans package-info.java pour trouver les annotations XmlJavaTypeAdapter dynamiquement.

3. J'ai ajouté les annotations XmlJavaTypeAdapter dans l'Interface Service, sinon, il y a des problèmes plaints par JAXB. C'est un bug de CXF, c'est pas grave.

4. J'ai ajouté une classe AdapterTackle, qui peut trouver la Classe -> le Package -> les annotations selon le contexte dans ClientRequestFilter et sauvegarder le relation entre les classes et les interfaces dans un HashMap.

5. Quand on fait le lifting, par exemple, pour Personne, on peut trouver la classe PersonneImpl qui a implémenté Personne et on fait le lifting par PersonneImpl au lieu de Personne(rename selon Personne encore).

C'est tout.

Le problème est le bug de CXF, le runtime ne trouve pas les annotations dans le package-info.java, on doit les ajouter dans Service encore une fois. C'est pas grave.

* Architecture (Raphaël)

Un UML représentant la nouvelle architecture est présent dans Projetv1>liftingAlgorithmClient>uml
Les anciens tests dans le client (package client) doivent fonctionner.
Un package de test (package test) permet de vérifier le fonctionnement de la nouvelle architecture

- Redéfinition de l'architecture : 
	-- Création d'un convertisseur Document <> InputStream pour éviter de créer des fichiers inutiles (méthodes enregistreFichier(@@@)...)
	-- Création d'interfaces, classes abstraites, génériques pour généraliser l'architecture des classes liées à l'algorithme de lifting
	-- Création de classes test simples pour : 
		# Le convertisseur Document <> InputStream
		# La nouvelle architecture
		# Lancement des tests et succès
- Fix d'un bug dans la méthode removeExtraFields(@@@) : La modification d'un élément du schéma XML lors de son parcours
par un Iterator entrainait une erreur de type ConcurrentModificationException. Résolution en utilisant des méthodes propres
à l'objet Iterator. 
- Rédaction de la javadoc associée à la nouvelle architecture
- Merge à la main de la classe Lifting : lors du sprint 2, la qualité du code interdisait de réutiliser la même classe (celle contenant
l'algorithme de lifting), du côté du client et du serveur. Deux classes différentes existaient avec certains algorithmes en commun. Utilisation
de meld pour merger les deux classes. 
