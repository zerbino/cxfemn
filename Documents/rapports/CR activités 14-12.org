Partie Raphaël

* Avant de lancer le test :
Le filtre côté serveur de Kévin et Hao provoque un bug dans le cas d'un appel get. Il faut sans doute faire
une vérification pour appeler l'algorithme de tree inclusion dans le cas d'un post. 
En attendant j'ai désactivé le filtre dans restful-beans.

* Création d'un client JAX-RS
Problème avec la version de JAX-RS. Pas de possibilité de créer un client avec ClientBuilder car ClientBuilder n'est pas 
trouvé. 

ClientBuilder a été ajouté dans les versions récentes de JAX-RS pour fournir une implémentation d'un client qui ne dépende pas
des frameworks d'implémentations (CXF, Jersey...). Cette classe n'est pas présente dans le jar de jaxrs utilisé dans CXF 2.7.7.

J'ai essayé de réimporter le jar de JAX-RS, mais il n'est pas pris en compte. Dans le jar, le binaire porte le nom Client$Builder. A propos du dollar j'ai trouvé cette doc oracle : 
http://docs.oracle.com/javase/specs/jls/se5.0/html/binaryComp.html
qui dit que :
The binary name of a member type consists of the binary name of its immediately enclosing type, followed by $, followed by the simple name of the member. 

* Absence du bug attendu
Dans le cas suivant :

"Prendre l'exemple d'une méthode GET :

Personne get(String id)

connues du serveur et du client.
Puis le serveur substitue à cette méthode une nouvelle :

Etudiant get(String id)

avec Etudiant sous-type de Personne.

Le principe de substitution devrait s'appliquer.
Côté client, on attend une Personne et on reçoit un Etudiant.

--
Hervé Grall"

Ici, on n'a pas le bug attendu. 

* Difficulté à comparer la ressource appelée et le proxy
Dans le cas de figure précédent, on place un filtre coté client pour effectuer l'algorithme de lifting. Dans un premier temps, il faudrait
vérifier que le proxy renvoie le même type de méthode que la ressource effectivement appelée. Cependant il n'est pas possible, comme
du côté serveur, de récupérer la ressource appelée. Il faut donc faire la vérification dans le xml. 
Update : apparemment il est possible de récupérer un objet ClassLoader en spécifiant un hôte et un port. Il est donc peut être possible de récupérer la ressource.

* Difficulté à récupérer la méthode appelée
Afin de procéder à l'algorithme de lifting, il faut avoir l'information de la méthode appelée, afin de comparer l'entité xml reçue avec
l'objet attendu par le proxy de la ressource côté client. Pour l'instant, je n'ai pas trouvé de méthode simple pour récupérer cette méthode
de façon automatique. Côté serveur, il suffit d'injecter un objet de type ResourceInfo et de récupérer la méthode après matching. Ici, ResourceInfo est nul. 
Pour récupérer la méthode a la main, deux problèmes se posent donc :
- Récupérer la classe de la ressource
- Récupérer la méthode correspondant à l'appel
Pour résoudre le deuxième problème, il est possible d'utiliser l'uri appelé, et d'aller le comparer aux uri dans la méthode. Cette méthode
peut vite être fastidieuse (les PATH dans la classe du service peuvent être fractionnés pour permettre des factorisations, donc il y aurait 
des cas à traiter ou des astuces à trouver).



