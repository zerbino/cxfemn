package utile;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.ArrayList;

public class UniformementRepresentable {
	public String toString() {
		StringBuilder sb = new StringBuilder();
		Class<? extends UniformementRepresentable> cls = getClass();
		Field[] f = cls.getDeclaredFields();

		for (int i = 0; i < f.length; i++) {
			f[i].setAccessible(true);
			try {
				String sep = ((i+1) < f.length)? "; " : ""; 
				sb.append(f[i].getName() + " = " + f[i].get(this) + sep);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return "[" + sb.toString() + "]";
	}
	public static boolean equals(Object obj1,Object obj2){
		Class<? extends UniformementRepresentable> cls = obj1.getClass();
		Class<? extends Object> cls2 = obj2.getClass();
		if (this == obj2)return true;
		if (cls != cls2)return false;
		//we can't get fields that come from a superclass
		Field[] f1 = getFields(cls);
		Field[] f2 = getFields(cls2);
		boolean ok;
		for (int i = 0; i < f1.length; i++) {
			ok=false;
			f1[i].setAccessible(true);
			for (int j = 0; j < f2.length; j++) {
				f2[j].setAccessible(true);
				try {
					if(f1[i].getName().equals(f2[j].getName())&&f1[i].get(this).equals(f2[j].get(obj2))){
						ok=true;
						break;
					}
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if(!ok) return false;
		}
		return true;
	}
	public static Field[] getFields(Class<?> type){
		ArrayList<Field> ret = new ArrayList<Field>();
        ret=getAllFields(new ArrayList<Field>(), type);
        return ret.toArray(new Field[ret.size()]);
    }
    
    private static ArrayList<Field> getAllFields(ArrayList<Field> fields, Class<?> type) {
        for (Field field: type.getDeclaredFields()) {
            fields.add(field);
        }

        if (type.getSuperclass() != null) {
            fields = getAllFields(fields, type.getSuperclass());
        }

        return fields;
    }
	public static void main(String[] args){
		A a=new A("toto");
		A b=new A("too");
		System.out.println(a.equals(b));
		b.s="toto";
		System.out.println(a.equals(b));
		b=new B("toto");
		System.out.println(a.equals(b));
		System.out.println(a.equals((A)(b)));
	}
}
class AINT extends UniformementRepresentable{
	public String s;
	public AINT(String s) {
		super();
		this.s = s;
	}
}
class A extends AINT{
	public A(String s) {
		super(s);
	}
}
class B extends A{

	public B(String s) {
		super(s);
		// TODO Auto-generated constructor stub
	}
	
}